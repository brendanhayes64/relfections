When would you want to use a remote repository rather than keeping all your work local?
	
	If you want to share your work with others, may need to work on it from different computers and it is good to use as a backup in case your computer dies.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

	There may be times when you are working on some functionality that may break with a newer version or are working on an experimental branch that was pulled from older version

Describe the differences between forks, clones, and branches. When would you use one instead of another?

	Forks are GitHub specific and are basically clones of another repository. Clones are copies of a repository, usually on your local machine. Branches are specific to 1 repository and represent a new path of commits. Forks are good if you want to build on someone elses work but not necessaryily add to the current repo but want to make sure you give credit to the original. Clones are good for copying a repo and aren't concerned with giving credit nor sharing the repo on github. Branches are good if you'd like to make a new version of something or try a new approach.

What is the benefit of having a copy of the last known state of the remote stored locally?
	
		Allows you to work offline and have access to the most recent (before you went offline) copy of the remote repo in case you need it.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

	To collaborate without Git or GitHub would be difficult. You would need to merge changes manually meaning you would need to have discussions via phone/email/person as to what needs to be changed. It would be challenging to keep track of what changes and easily revert back to a previous version. On the other hand if the type of project only requires 1 person to work on a file at a time and the scope of the project is small then passing it along via email/over a network shouldn't be hard.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

	Making changes in a separate branch is good for when you have a new idea and you'd like to get some feedback on it before updating the master. This allows for other collaborators a chance to look at and make suggestions on how to improve it or give reasons why it shouldnt be included. Making a change in master might be ok if its a bug fix or change that is needed and should be added as soon as possible.